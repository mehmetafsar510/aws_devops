AWSTemplateFormatVersion: 2010-09-09
Description:
  We are going to implement a simple serverless application 
  using S3, API Gateway, Lambda, Step Functions, SNS & SES with using Aws Cloudformation template.

Parameters:

  StageName:
    Type: String
    Description: Name of the stage that you want the API to be deployed in.
    Default: beta

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies: 
        - PolicyName: cloudwatchlogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: snsandsespermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ses:*"
                  - "sns:*"
                  - "states:*"
                Resource: '*'

  GreetingLambda:
    Type: AWS::Lambda::Function # change FROM_EMAIL_ADDRESS to your own email adress
    Properties:
      Code:
        ZipFile: |
          import boto3, os, json
          
          FROM_EMAIL_ADDRESS = 'drmehmet510@gmail.com' 
          
          ses = boto3.client('ses')
          
          def lambda_handler(event, context):
              # Print event data to logs .. 
              print("Received event: " + json.dumps(event))
              # Publish message directly to email, provided by EmailOnly or EmailPar TASK
              ses.send_email( Source=FROM_EMAIL_ADDRESS,
                  Destination={ 'ToAddresses': [ event['Input']['email'] ] }, 
                  Message={ 'Subject': {'Data': 'Whiskers Commands You to attend!'},
                      'Body': {'Text': {'Data': event['Input']['message']}}
                  }
              )
              return 'Success!'
      Description: A greeting function
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - states.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies: 
        - PolicyName: cloudwatchlogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                  - "logs:DescribeLogGroups"
                Resource: "*"
        - PolicyName: invokelambdasandsendSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "sns:*"
                Resource: '*'

  MyStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location:
        Bucket: mehmetafsar.com
        Key: pet-cuddle-o-tron.json
      DefinitionSubstitutions:
        EMAIL_LAMBDA_ARN: !GetAtt GreetingLambda.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: arn:aws:logs:us-east-1:646075469158:log-group:ErrorLog:*
        IncludeExecutionData: True
        Level: ALL
      RoleArn: !GetAtt StateMachineRole.Arn #required
      StateMachineName: PetCuddleOTron

  ApiLambda:
    DependsOn:
      - MyStepFunction
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: 
          !Sub
            - |
              import boto3, json, os, decimal

              SM_ARN = '${MySMURI}'

              sm = boto3.client('stepfunctions')

              def lambda_handler(event, context):
                  # Print event data to logs .. 
                  print("Received event: " + json.dumps(event))

                  # Load data coming from APIGateway
                  data = json.loads(event['body'])
                  data['waitSeconds'] = int(data['waitSeconds'])

                  # Sanity check that all of the parameters we need have come through from API gateway
                  # Mixture of optional and mandatory ones
                  checks = []
                  checks.append('waitSeconds' in data)
                  checks.append(type(data['waitSeconds']) == int)
                  checks.append('preference' in data)
                  checks.append('message' in data)
                  if data.get('preference') == 'sms':
                      checks.append('phone' in data)
                  if data.get('preference') == 'email':
                      checks.append('email' in data)

                  # if any checks fail, return error to API Gateway to return to client
                  if False in checks:
                      response = {
                          "statusCode": 400,
                          "headers": {"Access-Control-Allow-Origin":"*"},
                          "body": json.dumps( { "Status": "Success", "Reason": "Input failed validation" }, cls=DecimalEncoder )
                      }
                  # If none, start the state machine execution and inform client of 2XX success :)
                  else: 
                      sm.start_execution( stateMachineArn=SM_ARN, input=json.dumps(data, cls=DecimalEncoder) )
                      response = {
                          "statusCode": 200,
                          "headers": {"Access-Control-Allow-Origin":"*"},
                          "body": json.dumps( {"Status": "Success"}, cls=DecimalEncoder )
                      }
                  return response

              # This is a workaround for: http://bugs.python.org/issue16535
              # Solution discussed on this thread https://stackoverflow.com/questions/11942364/typeerror-integer-is-not-json-serializable-when-serializing-json-in-python
              # https://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object
              # Credit goes to the group :)
              class DecimalEncoder(json.JSONEncoder):
                  def default(self, obj):
                      if isinstance(obj, decimal.Decimal):
                          return int(obj)
                      return super(DecimalEncoder, self).default(obj)
            - MySMURI: !GetAtt MyStepFunction.Arn
      Description: A greeting function
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8

  MyRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: PetCuddleOTron Api
      Name: PetCuddleOTron

  ApiResources:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt MyRestApi.RootResourceId #required
      PathPart: pet #required
      RestApiId: !Ref MyRestApi #required

  ApiPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: POST #required
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - ApiLambda
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            StatusCode: "200"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref ApiResources #required
      RestApiId: !Ref MyRestApi #required

  ApiOption:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref ApiResources
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            StatusCode: "200"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: "200"


  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          ResourcePath: "/*"
      RestApiId: !Ref MyRestApi
      StageName: LATEST 
  
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt "ApiLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/*"

  ApiDeployment:
    DependsOn:
      - ApiPost
      - ApiOption
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref MyRestApi #required
      StageName: !Ref StageName

  myS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: staticwebpetcuddle
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html

  myBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref myS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Join
              - ""
              - - !GetAtt myS3Bucket.Arn
                - "/*"

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  S3BucketSecureURL:
    Value: !Join ['', ['https://', !GetAtt [myS3Bucket, DomainName ], '/index.html']]
    Description: Name of S3 bucket 
