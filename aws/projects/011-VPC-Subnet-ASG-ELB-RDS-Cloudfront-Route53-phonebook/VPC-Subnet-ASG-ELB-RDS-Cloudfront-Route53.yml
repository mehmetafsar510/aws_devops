AWSTemplateFormatVersion: 2010-09-09
Description: |
  AWS CloudFormation Sample Template vpc_multiple_subnets, web server, RDS, Autoscaling group adn ALB: Sample
  template showing how to create an architecture  included VPC with multiple subnets. There are two public, two 
  private subnets and each AZ has NAT Gateway and public subnets routed internet gateway. Both Subnets has 
  contains an EC2 instance behind the load balancer and also basic web server application written with Flask. 
  This app, send data to the RDS which is located private subnet and also just specific EC2 can reach RDS instance. 
  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create 
  a stack from this template.

Parameters:

  VpcCidr:
    Type: String
    Description: VPC CIDR. (e.g. 10.0.0.10/16)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.0.10/16

  # Public Subnet A
  PublicSubnetACIDRBlock:
    Type: String
    Description: Subnet CIDR for Public Subnet A, (e.g. 10.0.10.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.10.10/24

  # Public Subnet B
  PublicSubnetBCIDRBlock:
    Type: String
    Description: Subnet CIDR for Public Subnet B, (e.g. 10.0.11.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.11.10/24

  # Private Subnet A
  PrivateSubnetACIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet A, (e.g. 10.0.20.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.20.10/24

  # Private Subnet B
  PrivateSubnetBCIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet B, (e.g. 10.0.21.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.21.10/24

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MyDomainName:
    Type: AWS::Route53::HostedZone::Id
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. clarusway.us
  PhonebookDomainName:
    Type: String
    Description: The full domain name e.g. phonebook.clarusway.us
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      '64': ami-0947d2ba12ee1ff75
    us-east-2:
      '64': ami-03657b56516ab7912
    us-west-1:
      '64': ami-0e4035ae3f70c400f 
    us-west-2:
      '64': ami-01fee56b22f308154
    eu-central-1:
      '64': ami-00a205cb8e06c3c4e
    eu-central-2:
      '64': ami-0bb3fad3c0286ebd5  

Resources:
  PhonebookCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      CertificateTransparencyLoggingPreference: DISABLED
      DomainName: !Ref PhonebookDomainName #required
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref PhonebookDomainName
          HostedZoneId: !Ref MyDomainName
  PhonebookCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to ALBDNS
        Origins:
        - DomainName: !GetAtt ALB.DNSName
          Id: ALBOriginId
          CustomOriginConfig:
            OriginKeepaliveTimeout: 5
            OriginSSLProtocols: 
            - TLSv1
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        Enabled: true
        Aliases:
        - !Ref PhonebookDomainName 
        DefaultCacheBehavior:
          TargetOriginId: ALBOriginId
          CachedMethods: 
            - GET
            - HEAD
          SmoothStreaming: false
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          - PUT
          - POST
          - PATCH
          - DELETE
          Compress: true
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref PhonebookCertificate
          SslSupportMethod: sni-only
  PhonebookDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref MyDomainName
      RecordSets:
      - Name: !Ref PhonebookDomainName
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt PhonebookCloudfront.DomainName

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for ALB #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServersSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for Web Servers #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  WebServerTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
  
  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application

  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ALB #required
      Port: 80 #required
      Protocol: HTTP #required

  WebServerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap 
          - AWSRegionArch2AMI
          - !Ref 'AWS::Region'
          - '64'
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt WebServersSecGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
             - Key: Name
               Value: !Sub Web Server of ${AWS::StackName}
        UserData:
          Fn::Base64: 
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                yum install gcc -y
                wget http://download.redis.io/redis-stable.tar.gz
                tar xvzf redis-stable.tar.gz
                cd redis-stable
                yum install make 
                make
                cd /home/ec2-user
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/011-VPC-Subnet-ASG-ELB-RDS-Cloudfront-Route53-phonebook/app.py
                mkdir templates
                cd templates
                wget https://github.com/mehmetafsar510/aws_devops/blob/master/aws/projects/011-VPC-Subnet-ASG-ELB-RDS-Cloudfront-Route53-phonebook/templates/index.html
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/011-VPC-Subnet-ASG-ELB-RDS-Cloudfront-Route53-phonebook/templates/delete.htmll
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/011-VPC-Subnet-ASG-ELB-RDS-Cloudfront-Route53-phonebook/templates/add-update.html
                cd ..
                python3 app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address

  TemproraryInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap 
          - AWSRegionArch2AMI
          - !Ref 'AWS::Region'
          - '64'
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
          - !GetAtt WebServersSecGroup.GroupId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: Temprorary Instance
      UserData:
          Fn::Base64: 
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                cd /home/ec2-user
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/011-VPC-Subnet-ASG-ELB-RDS-Cloudfront-Route53-phonebook/init-phonebook-db.py
                python3 init-phonebook-db.py
                echo "sudo halt" | at now + 10 min
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address


  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: MyDatabaseServer
    Properties:
      Cooldown: 200
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref WebServerTG
      VPCZoneIdentifier:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  MyDBSecurityGroup:
    Type: "AWS::RDS::DBSecurityGroup"
    Properties:
      DBSecurityGroupIngress: #required
        - EC2SecurityGroupId: !GetAtt WebServersSecGroup.GroupId
      EC2VpcId: !Ref VPC
      GroupDescription: Security group for RDS DB Instance. #required

  MyDatabaseServer:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: "20"
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t3.micro #required
      DBName: phonebook
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      DeleteAutomatedBackups: true
      DeletionProtection: false
      DBSecurityGroups:
        - !Ref MyDBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.20
      MasterUserPassword: !Ref DBPassword
      MasterUsername: admin
      MaxAllocatedStorage: 30
      PreferredBackupWindow: 03:00-04:00
      MultiAZ: true
      Port: "3306"
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup

  ReplicaDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: myReplicaRds
      SourceDBInstanceIdentifier: !Ref MyDatabaseServer
      DBInstanceClass: db.t3.micro
      Tags:
      - Key: Name
        Value: Read Replica Database
        
  ElasticacheComponentSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Elasticache security group"
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId:
            Ref: WebServersSecGroup
      VpcId:
        Ref: VPC
  SubnetGroup: 
    Type: AWS::ElastiCache::SubnetGroup
    Properties: 
      Description: "Cache Subnet Group"
      SubnetIds: 
        - Ref: "PublicSubnetA"

  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    DeletionPolicy: Delete
    Properties:
      CacheSubnetGroupName: !Ref SubnetGroup
      AutoMinorVersionUpgrade: true
      Engine: redis
      EngineVersion: 5.0.4
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds: 
        - !Ref ElasticacheComponentSecurityGroup
      Tags:
        - Key: Name
          Value: MehmetStackElasticCache
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetACIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]         
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBCIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B

  PrivateSubnetA:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetACIDRBlock
      AvailabilityZone: !Select [ 0, !GetAZs '' ]    
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnetBCIDRBlock
     AvailabilityZone: !Select [ 1, !GetAZs '' ]       
     Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  
  PublicRouteRule1:  
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ1)
  
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ1)
  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable1
  
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable2

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: 
        Fn::GetAtt:
          - EIP1
          - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Nat-Gateway-Public-Subnet-A 
  EIP1:
   DependsOn: AttachGateway
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  NATGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: 
        Fn::GetAtt:
          - EIP2
          - AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Nat-Gateway-Public-Subnet-B
  EIP2:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  PublicRouteRule2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: 
        Ref: NATGateway1
  
  PublicRouteRule3:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: 
        Ref: NATGateway2
Outputs:
  DistributionName:
    Description: URL to access the CloudFront distribution
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - PhonebookCloudfront
          - DomainName
  ALBDnsName:
    Description: URL to access the Application Load Balance
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ALB
          - DNSName

  WebsiteURL:
    Description: Website URL
    Value: !Join 
      - ''
      - - 'http://'
        - !Ref PhonebookDomainName
        
  