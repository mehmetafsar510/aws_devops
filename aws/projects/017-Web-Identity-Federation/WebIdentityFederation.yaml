AWSTemplateFormatVersion: '2010-09-09'
Description:  You will be implementing a simple serverless application which uses Web Identity Federation.
Parameters:

  DomainRoot:
    Type: AWS::Route53::HostedZone::Id
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. clarusway.us
  FullDomain:
    Type: String
    Description: The full domain name e.g. capstone.clarusway.us
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  CognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      '64': ami-013f17f36f8b1fefb
    us-east-2:
      '64': ami-03657b56516ab7912
    us-west-1:
      '64': ami-0e4035ae3f70c400f 
    us-west-2:
      '64': ami-01fee56b22f308154
    eu-central-1:
      '64': ami-00a205cb8e06c3c4e
    eu-central-2:
      '64': ami-0bb3fad3c0286ebd5

Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  appbucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: staticweb-2514
      AccessControl: PublicRead
      LifecycleConfiguration:
        Rules:
          - Id: NoncurrentVersionExpiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 45
      LoggingConfiguration:
        DestinationBucketName: mehmetafsar.com
        LogFilePrefix: !Sub "${NamePrefix}-${ProjectName}-${AWS::Region}/"
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref appbucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Join
              - ""
              - - !GetAtt appbucket.Arn
                - "/*"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  SSLCert:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref FullDomain #required
      DomainValidationOptions:
        - DomainName: !Ref FullDomain
          HostedZoneId: !Ref DomainRoot
      ValidationMethod: DNS

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate: 
            AcmCertificateArn: !Ref SSLCert
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
        IPV6Enabled: !Ref 'IPV6Enabled'
        Aliases: 
          - !Ref FullDomain
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          DefaultTTL: !Ref CacheDefault
          ViewerProtocolPolicy: !Ref 'ViewerProtocolPolicy'
          TargetOriginId: Bucket
        Origins:
          - Id: Bucket
            DomainName: !GetAtt appbucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref OriginAccessIdentity


  FullDomainRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref DomainRoot
      RecordSets: 
        - Name: !Ref FullDomain
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Distribution.DomainName
  patchesprivatebucket:
    Type: AWS::S3::Bucket
    Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: ['GET', 'HEAD']
              AllowedOrigins: ['*']

  CopyS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects into buckets
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os 
          import json
          import cfnresponse
          import boto3
          import logging

          from botocore.exceptions import ClientError
          client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})

          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                print 'copy {} to {}'.format(key, dest_key)
                client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS
  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              
              -
                Sid: WriteToStudentBuckets
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${appbucket}"
                  - !Sub "arn:aws:s3:::${appbucket}/*"
                  - !Sub "arn:aws:s3:::${patchesprivatebucket}"
                  - !Sub "arn:aws:s3:::${patchesprivatebucket}/*"
  privatepatchespolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permissions to List contents of the privatepatches bucket
      ManagedPolicyName: "PrivatePatchesPermissions"
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Sid: ReadFromLCBucket
            Effect: Allow
            Action:
              - "s3:ListBucket"
              - "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${patchesprivatebucket}"
              - !Sub "arn:aws:s3:::${patchesprivatebucket}/*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
          
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: False
          RequireUppercase: True
     

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: real-time-account-activity-report
      GenerateSecret: False
      WriteAttributes:
        - email
      ReadAttributes:
        - email
      RefreshTokenValidity: 1
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Ref FullDomain
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  CognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties: 
      ProviderName: Google
      AttributeMapping:
        email: drmehmet510@gmail.com
      ProviderDetails:
        client_id: 956064605870-q7gtbpeb8l0gnqalbs8f98s80gs9jac4.apps.googleusercontent.com
        client_secret: WmIRi0BmChQxMWJaLOCqmjyF
        authorize_scopes: email openid
      ProviderType: Google
      UserPoolId: 
        Ref: UserPool

  CognitoId:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
     "AllowUnauthenticatedIdentities": false
     "SupportedLoginProviders": { "accounts.google.com": "956064605870-q7gtbpeb8l0gnqalbs8f98s80gs9jac4.apps.googleusercontent.com" }

  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Sub '${CognitoId}'
      Roles:
        unauthenticated: !GetAtt UnauthenticatedUserRole.Arn
        authenticated: !GetAtt AuthenticatedUserRole.Arn
  AuthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
               - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Sub '${CognitoId}'
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                  - "mobileanalytics:*"
                Resource: "*"
              - 
                Sid: ReadFromLCBucket
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${patchesprivatebucket}"
                  - !Sub "arn:aws:s3:::${patchesprivatebucket}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "This is a access Policy."

  UnauthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoId
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - appbucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - appbucket
          - DomainName
    Description: app bucket URL for Google
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref CognitoUserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://${CognitoDomain}.auth.us-east-1.amazoncognito.com/login?client_id=${CognitoUserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=
    Description: The hosted UI URL