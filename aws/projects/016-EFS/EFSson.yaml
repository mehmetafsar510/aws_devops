AWSTemplateFormatVersion: 2010-09-09
Description:  Multi-AZ  with automount EFS.
Parameters:
  InstanceType:
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
  LatestAmiId:
    Description: AMI for Instance (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  VpcCidr:
    Type: String
    Description: VPC CIDR. (e.g. 10.0.0.10/16)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.0.10/16
  # Public Subnet A
  PublicSubnetACIDRBlock:
    Type: String
    Description: Subnet CIDR for Public Subnet A, (e.g. 10.0.10.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.10.10/24
  # Public Subnet B
  PublicSubnetBCIDRBlock:
    Type: String
    Description: Subnet CIDR for Public Subnet B, (e.g. 10.0.11.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.11.10/24
  # Private Subnet A
  PrivateSubnetACIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet A, (e.g. 10.0.20.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.20.10/24
  # Private Subnet B
  PrivateSubnetBCIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet B, (e.g. 10.0.21.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.21.10/24
  PrivateSubnetCCIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet B, (e.g. 10.0.21.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.22.10/24
  PrivateSubnetDCIDRBlock:
    Type: String
    Description: Subnet CIDR for Private Subnet B, (e.g. 10.0.21.10/24)
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28).
    Default: 10.0.23.10/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetACIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]         
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBCIDRBlock
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B

  PrivateSubnetA:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetACIDRBlock
      AvailabilityZone: !Select [ 0, !GetAZs '' ]    
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnetBCIDRBlock
     AvailabilityZone: !Select [ 1, !GetAZs '' ]       
     Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnetCCIDRBlock
     AvailabilityZone: !Select [ 2, !GetAZs '' ]       
     Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C
  
  PrivateSubnetD:
    Type: AWS::EC2::Subnet
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnetDCIDRBlock
     AvailabilityZone: !Select [ 3, !GetAZs '' ]       
     Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-D

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  
  PublicRouteRule1:  
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ1)
  
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ1)

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable1
  
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetD
      RouteTableId: !Ref PrivateRouteTable2

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH public access and HTTP 
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 80
        - Description: 'Allow SSH IPv6 IN'
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::/0
      VpcId: !Ref VPC
  InstanceSGSelfReferenceRule:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: 'tcp'
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable NFS access from EC2
      SecurityGroupIngress:
        - FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt 
            - InstanceSecurityGroup
            - GroupId
      VpcId: !Ref VPC

  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      ThroughputMode: bursting
      BackupPolicy:
        Status: DISABLED    

  EFSMountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId:  !Ref PrivateSubnetA
  EFSMountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId:  !Ref PrivateSubnetB

  EFSMountTarget3:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId:  !Ref PrivateSubnetC

  EFSMountTarget4:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !GetAtt 
          - EFSSecurityGroup
          - GroupId
      SubnetId:  !Ref PrivateSubnetD
 
  MyEc2Instance1:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - "EFSMountTarget1"
      - "EFSMountTarget2"
      - "EFSMountTarget3"
      - "EFSMountTarget4"
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub EFS Machine 1st of ${AWS::StackName} 
      UserData:
        Fn::Base64: 
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install -y amazon-efs-utils
                yum install python3 -y
                pip3 install flask
                mkdir -p /home/ec2-user/efs
                mount -t efs -o tls ${DIR_SRC}:/ /home/ec2-user/efs
                chown ec2-user:ec2-user /home/ec2-user/efs
                sleep 60
                cd /home/ec2-user/efs
                python3 app.py
              - DIR_SRC: !Ref EFSFileSystem
       
  MyEc2Instance2:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - "EFSMountTarget1"
      - "EFSMountTarget2"
      - "EFSMountTarget3"
      - "EFSMountTarget4"
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PublicSubnetB
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub EFS Machine 2nd of ${AWS::StackName} 
      UserData:
        Fn::Base64: 
            !Sub
              - |
                #! /bin/bash
                yum update -y
                yum install -y amazon-efs-utils
                mkdir -p /home/ec2-user/efs
                mount -t efs -o tls ${DIR_SRC}:/ /home/ec2-user/efs
                chown ec2-user:ec2-user /home/ec2-user/efs
                cd /home/ec2-user/efs
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/002-roman-numerals-converter/001-roman-numerals-converter/app.py
                mkdir /home/ec2-user/efs/templates
                cd /home/ec2-user/efs/templates
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/002-roman-numerals-converter/001-roman-numerals-converter/templates/index.html
                wget https://raw.githubusercontent.com/mehmetafsar510/aws_devops/master/aws/projects/002-roman-numerals-converter/001-roman-numerals-converter/templates/result.html
              - DIR_SRC: !Ref EFSFileSystem
          

Outputs:
  PublicDNS:
    Description: EFS 1st Machine DNS Name
    Value:
      Fn::GetAtt:
      - MyEc2Instance1
      - PublicDnsName
  WebsiteURL:
    Description: EFS 2nd Machine DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt MyEc2Instance2.PublicDnsName
